name: Deploy NextShift PWA to GitHub Pages

on:
  # 🏷️ Runs ONLY when a new release tag is pushed (for production releases)
  # This ensures deployment happens only after proper review and tagging
  push:
    tags:
      - 'v*.*.*'  # Matches semantic versioning: v1.0.0, v2.1.3, etc.

  # 🔧 Allows manual deployment from the Actions tab (for emergency releases)
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (leave empty to use package.json)'
        required: false
        type: string

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: pages
  cancel-in-progress: false

jobs:
  # Build and deploy PWA files only
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
      - name: Install dependencies
        run: npm ci
      - name: Extract version from tag
        id: version
        run: |
          echo "🏷️ Determining deployment version..."
          
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            # Extract version from tag (remove 'v' prefix)
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "📦 Tag-based deployment detected"
            echo "🏷️ Tag: ${GITHUB_REF#refs/tags/}"
            echo "📋 Version: $VERSION"
            
            # Update package.json version to match the tag
            npm version --no-git-tag-version $VERSION
            echo "✅ Updated package.json version to $VERSION"
            
          elif [[ -n "${{ github.event.inputs.version }}" ]]; then
            # Manual deployment with specified version
            VERSION="${{ github.event.inputs.version }}"
            echo "🔧 Manual deployment with specified version: $VERSION"
            npm version --no-git-tag-version $VERSION
            
          else
            # Fallback to package.json version (manual deployment without version)
            echo "📋 Manual deployment detected, using package.json version"
            VERSION=$(node -p "require('./package.json').version")
            echo "📋 Package.json version: $VERSION"
          fi
          
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "🚀 Deploying NextShift PWA version: $VERSION"
      - name: Lint code
        run: npm run lint
      - name: Run tests
        run: npm run test
      - name: Build minified assets
        run: npm run build
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Prepare PWA deployment
        run: |
          echo "🔨 Preparing NextShift PWA files for deployment..."
          echo "📦 Version: ${{ steps.version.outputs.VERSION }}"
          echo "🏷️ Deployment trigger: ${{ github.event_name }}"
          
          # Create deployment directory
          mkdir -p _site

          # Copy Vite build contents directly into _site (not nested)
          cp -r dist/. _site/

          # Create deployment info file
          cat > _site/deployment-info.json << EOF
          {
            "version": "${{ steps.version.outputs.VERSION }}",
            "build_time": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "commit_sha": "${{ github.sha }}",
            "deployment_trigger": "${{ github.event_name }}",
            "tag": "${{ github.ref_name }}",
            "workflow_run_id": "${{ github.run_id }}",
            "workflow_run_number": "${{ github.run_number }}"
          }
          EOF

          echo "📊 Deployment contents:"
          find _site -type f | sort
          echo ""
          echo "📈 Bundle size analysis:"
          TOTAL_SIZE=$(du -sb _site/ | cut -f1)
          TOTAL_KB=$(( (TOTAL_SIZE + 1023) / 1024 ))
          echo "└── Total deployment size: ${TOTAL_KB}KB"
          echo ""
          echo "✅ PWA ready for production deployment (version ${{ steps.version.outputs.VERSION }})!"

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload only the clean PWA files
          path: _site
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Verify deployment
        run: |
          echo "🔍 Verifying deployment..."
          DEPLOYMENT_URL="${{ steps.deployment.outputs.page_url }}"
          echo "🌐 Deployment URL: $DEPLOYMENT_URL"
          
          # Wait a moment for the deployment to be available
          echo "⏳ Waiting for deployment to be available..."
          sleep 30
          
          # Check if the site is accessible
          if curl -s -f --max-time 30 "$DEPLOYMENT_URL" > /dev/null; then
            echo "✅ Deployment verification successful!"
            echo "🎉 NextShift PWA v${{ steps.version.outputs.VERSION }} is now live!"
          else
            echo "⚠️ Deployment verification failed - site might still be propagating"
            echo "💡 Please check manually: $DEPLOYMENT_URL"
          fi

      - name: Create deployment summary
        run: |
          echo "# 🚀 NextShift PWA Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📦 Deployment Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: \`${{ steps.version.outputs.VERSION }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment URL**: [${{ steps.deployment.outputs.page_url }}](${{ steps.deployment.outputs.page_url }})" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: [\`${{ github.sha }}\`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ✅ Quality Checks Passed" >> $GITHUB_STEP_SUMMARY
          echo "- Code quality (Biome)" >> $GITHUB_STEP_SUMMARY
          echo "- Tests (Vitest)" >> $GITHUB_STEP_SUMMARY
          echo "- Production build (Vite)" >> $GITHUB_STEP_SUMMARY
          echo "- PWA manifest validation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🎯 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. **Verify the deployment**: Visit the [live site](${{ steps.deployment.outputs.page_url }})" >> $GITHUB_STEP_SUMMARY
          echo "2. **Test PWA features**: Try installing the app and testing offline functionality" >> $GITHUB_STEP_SUMMARY
          echo "3. **Monitor**: Keep an eye on any issues or user feedback" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*Deployment completed successfully by GitHub Actions*" >> $GITHUB_STEP_SUMMARY
