name: Deploy NextShift PWA to GitHub Pages

on:
  # Runs when a new tag is pushed (for releases)
  push:
    tags:
      - 'v*.*.*'  # Matches v1.0.0, v2.1.3, etc.

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: pages
  cancel-in-progress: false

jobs:
  # Build and deploy PWA files only
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
      - name: Install dependencies
        run: npm ci
      - name: Extract version from tag
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "Deploying version: $VERSION"
            echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
            
            # Update package.json version to match the tag
            npm version --no-git-tag-version $VERSION
            echo "Updated package.json version to $VERSION"
          else
            echo "Not a tag-based deployment, using package.json version"
            VERSION=$(node -p "require('./package.json').version")
            echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          fi
      - name: Lint code
        run: npm run lint
      - name: Run tests
        run: npm run test
      - name: Build minified assets
        run: npm run build
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Prepare PWA deployment
        run: |
          echo "Preparing NextShift PWA files for deployment..."
          echo "Deploying version: ${{ steps.version.outputs.VERSION }}"

          # Create deployment directory if it doesn't exist
          mkdir -p _site

          # Copy Vite build contents directly into _site (not nested)
          cp -r dist/. _site/

          echo "✓ Deployment contents:"
          find _site -type f | sort
          echo "✓ PWA ready for deployment (version ${{ steps.version.outputs.VERSION }})!"

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload only the clean PWA files
          path: _site
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
