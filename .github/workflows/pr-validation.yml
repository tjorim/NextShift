name: PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  validate-changes:
    name: Validate PR Changes
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for comparison

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Analyze changed files
        run: |
          echo "üîç Analyzing PR changes..."

          # Fetch the base branch for comparison (works on forks)
          if [ "${{ github.event_name }}" = "pull_request" ] && [ -n "${{ github.event.pull_request.base.repo.full_name }}" ]; then
            echo "üì• Fetching PR base: ${{ github.event.pull_request.base.repo.full_name }}/${{ github.event.pull_request.base.ref }}"

            # Add the base repository as a remote and fetch from it (handles forks properly)
            BASE_REPO_URL="https://github.com/${{ github.event.pull_request.base.repo.full_name }}.git"
            git remote add base_repo "$BASE_REPO_URL" 2>/dev/null || true
            git fetch --no-tags --depth=1 base_repo ${{ github.event.pull_request.base.ref }} || {
              echo "‚ö†Ô∏è  Failed to fetch from PR base repository, falling back to origin default branch"
              git fetch --no-tags --depth=1 origin ${{ github.event.repository.default_branch }}
            }
            CHANGED_FILES=$(git diff --name-only FETCH_HEAD...HEAD)
          else
            echo "üì• Not a PR context, comparing with default branch"
            git fetch --no-tags --depth=1 origin ${{ github.event.repository.default_branch }}
            CHANGED_FILES=$(git diff --name-only origin/${{ github.event.repository.default_branch }}...HEAD)
          fi

          echo "üìù Changed files:"
          echo "$CHANGED_FILES" | sed 's/^/‚îú‚îÄ‚îÄ /'

          # Categorize changes
          CORE_CHANGES=$(echo "$CHANGED_FILES" | grep -E '\.(html|css|js|ts|tsx|jsx)$' || true)
          CONFIG_CHANGES=$(echo "$CHANGED_FILES" | grep -E '(vite\.config\.(js|ts)|biome\.json|package\.json|tsconfig\.json)$' || true)
          WORKFLOW_CHANGES=$(echo "$CHANGED_FILES" | grep -E '\.github/workflows' || true)
          DOC_CHANGES=$(echo "$CHANGED_FILES" | grep -E '\.(md|txt)$' || true)

          echo ""
          echo "üìä Change Analysis:"

          if [ -n "$CORE_CHANGES" ]; then
            echo "üîß Core app changes detected"
            echo "CORE_CHANGES=true" >> $GITHUB_ENV
          fi

          if [ -n "$CONFIG_CHANGES" ]; then
            echo "‚öôÔ∏è  Build configuration changes detected"
            echo "CONFIG_CHANGES=true" >> $GITHUB_ENV
          fi

          if [ -n "$WORKFLOW_CHANGES" ]; then
            echo "‚öôÔ∏è  Workflow changes detected"
            echo "WORKFLOW_CHANGES=true" >> $GITHUB_ENV
          fi

          if [ -n "$DOC_CHANGES" ]; then
            echo "üìö Documentation changes detected"
            echo "DOC_CHANGES=true" >> $GITHUB_ENV
          fi

      - name: Install dependencies
        run: npm ci

      - name: Validate core app changes
        if: env.CORE_CHANGES == 'true'
        run: |
          echo "üîß Validating core app changes..."

          # Run Biome linting
          if npm run lint; then
            echo "‚úÖ Code quality checks passed"
          else
            echo "‚ùå Code quality checks failed"
            exit 1
          fi

          # Run tests
          if npm run test; then
            echo "‚úÖ Tests passed"
          else
            echo "‚ùå Tests failed"
            exit 1
          fi

          # Check if critical functions still exist
          APP_JS=$(git ls-files | grep -E '(^|/)app\.(js|ts)$' | head -n1)
          if [ -n "$APP_JS" ] && [ -f "$APP_JS" ]; then
            echo "üìã Checking critical functions in: $APP_JS"
            node -e "
              const fs = require('fs');
              const appJs = fs.readFileSync('$APP_JS', 'utf8');

              const criticalFunctions = [
                'calculateShift',
                'formatDateCode',
                'getCurrentShiftDay'
              ];

              let missing = [];
              criticalFunctions.forEach(func => {
                const patterns = [
                  'function ' + func,
                  func + ' =',
                  'const ' + func + ' =',
                  'let ' + func + ' =',
                  'var ' + func + ' =',
                  func + ':' // For object methods
                ];
                if (!patterns.some(pattern => appJs.includes(pattern))) {
                  missing.push(func);
                }
              });

              if (missing.length > 0) {
                console.log('‚ùå Missing critical functions:', missing.join(', '));
                process.exit(1);
              } else {
                console.log('‚úÖ All critical functions present');
              }
            "
          fi

          # Check if HTML structure is intact
          if [ -f "index.html" ]; then
            # Basic HTML validation
            if grep -q '<html' index.html && grep -q '</html>' index.html; then
              echo "‚úÖ HTML structure intact"
            else
              echo "‚ùå HTML structure appears broken"
              exit 1
            fi
          fi

      - name: Validate build configuration changes
        if: env.CONFIG_CHANGES == 'true'
        run: |
          echo "‚öôÔ∏è  Validating build configuration changes..."

          # Test build to ensure config is valid
          npm run build
          echo "‚úÖ Build completed successfully"

          # Check if built manifest is valid
          if [ -f "dist/manifest.webmanifest" ]; then
            node -e "
              const manifest = JSON.parse(require('fs').readFileSync('dist/manifest.webmanifest', 'utf8'));
              const required = ['name', 'short_name', 'icons', 'start_url', 'display'];

              const missing = required.filter(field => !manifest[field]);
              if (missing.length > 0) {
                console.log('‚ùå Missing manifest fields:', missing.join(', '));
                process.exit(1);
              } else {
                console.log('‚úÖ Auto-generated manifest is valid');
              }
            "
          fi

      - name: Build PR preview
        if: env.CORE_CHANGES == 'true' || env.CONFIG_CHANGES == 'true'
        run: |
          echo "üî® Building PR preview for testing..."
          
          # Build the app for preview
          npm run build
          
          # Create preview info file
          cat > dist/pr-info.json << EOF
          {
            "pr_number": "${{ github.event.number }}",
            "commit_sha": "${{ github.event.pull_request.head.sha }}",
            "build_time": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "version": "PR-${{ github.event.number }}-$(echo ${{ github.event.pull_request.head.sha }} | cut -c1-7)"
          }
          EOF
          
          echo "‚úÖ PR preview build completed"

      - name: Upload PR preview artifact
        if: env.CORE_CHANGES == 'true' || env.CONFIG_CHANGES == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: pr-preview-${{ github.event.number }}
          path: dist/
          retention-days: 7

      - name: Check for version updates
        if: env.CORE_CHANGES == 'true' || env.CONFIG_CHANGES == 'true'
        run: |
          echo "üî¢ Checking version consistency..."

          # Check if version was updated in app.js CONFIG
          APP_JS=$(git ls-files | grep -E '(^|/)app\.(js|ts)$' | head -n1)
          if [ -n "$APP_JS" ] && [ -f "$APP_JS" ] && grep -q "VERSION.*3\.0\.0" "$APP_JS"; then
            echo "‚ÑπÔ∏è  Version in $APP_JS: 3.0.0 (consider updating for releases)"
          fi

          # Check package.json version if changed
          if [ -f "package.json" ]; then
            VERSION=$(node -e "console.log(JSON.parse(require('fs').readFileSync('package.json', 'utf8')).version)")
            echo "‚ÑπÔ∏è  Package version: $VERSION"
          fi

      - name: Performance impact analysis
        if: env.CORE_CHANGES == 'true'
        run: |
          echo "üìä Analyzing performance impact..."

          # Build and calculate bundle size
          npm run build
          DIST_SIZE=$(du -sb dist/ | cut -f1)
          DIST_KB=$(( (DIST_SIZE + 1023) / 1024 ))
          echo "Built bundle size: ${DIST_KB}KB"

          # Basic size check
          if [ $DIST_KB -gt 500 ]; then
            echo "‚ö†Ô∏è  Built bundle is getting large (${DIST_KB}KB)"
          else
            echo "‚úÖ Built bundle size is reasonable (${DIST_KB}KB)"
          fi

      - name: Security check
        if: env.CORE_CHANGES == 'true'
        run: |
          echo "üîí Running security checks..."

          # Check for potential security issues
          SECURITY_ISSUES=""
          APP_JS=$(git ls-files | grep -E '(^|/)app\.(js|ts)$' | head -n1)

          if [ -n "$APP_JS" ] && [ -f "$APP_JS" ]; then
            echo "üîç Security scanning: $APP_JS"

            # Check for console.log in production code (optional)
            if grep -q "console\.log" "$APP_JS" 2>/dev/null; then
              echo "‚ÑπÔ∏è  Console.log statements found (consider removing for production)"
            fi

            # Check for eval usage
            if grep -E "eval\s*\(|new\s+Function\s*\(" "$APP_JS" 2>/dev/null; then
              echo "‚ö†Ô∏è  eval() or new Function() usage detected - potential security risk"
              SECURITY_ISSUES="true"
            fi

            # Check for innerHTML without sanitization
            if grep -q "innerHTML.*=" "$APP_JS" 2>/dev/null; then
              echo "‚ÑπÔ∏è  innerHTML usage detected - ensure content is sanitized"
            fi
          else
            echo "‚ÑπÔ∏è  No app.(js|ts) file found for security scanning"
          fi

          if [ -z "$SECURITY_ISSUES" ]; then
            echo "‚úÖ No obvious security issues detected"
          fi

      - name: PR Summary
        uses: actions/github-script@v7
        with:
          script: |
            const { CORE_CHANGES, CONFIG_CHANGES, WORKFLOW_CHANGES, DOC_CHANGES } = process.env;

            let summary = "## üîç PR Validation Summary\n\n";

            // Change analysis
            summary += "### üìù Changes Detected:\n";
            if (CORE_CHANGES === 'true') summary += "- üîß Core application changes\n";
            if (CONFIG_CHANGES === 'true') summary += "- ‚öôÔ∏è Build configuration changes\n";
            if (WORKFLOW_CHANGES === 'true') summary += "- üîÑ Workflow changes\n";
            if (DOC_CHANGES === 'true') summary += "- üìö Documentation changes\n";

            summary += "\n### ‚úÖ Validation Results:\n";

            if (CORE_CHANGES === 'true') {
              summary += "- ‚úÖ Code quality checks passed (Biome)\n";
              summary += "- ‚úÖ Tests passed (Vitest)\n";
              summary += "- ‚úÖ Critical functions verified\n";
            }

            if (CONFIG_CHANGES === 'true') {
              summary += "- ‚úÖ Build configuration validated\n";
              summary += "- ‚úÖ Auto-generated manifest valid\n";
            }

            if (CORE_CHANGES === 'true') {
              summary += "- ‚úÖ Security scan completed\n";
              summary += "- ‚úÖ Performance impact analyzed\n";
            }

            summary += "\n### üöÄ Ready for Review\n";

            if (CORE_CHANGES === 'true' || CONFIG_CHANGES === 'true') {
              summary += "All automated checks passed! This PR is ready for manual review.\n\n";
              summary += "üì¶ **PR Preview**: A preview build has been uploaded as an artifact (`pr-preview-" + context.issue.number + "`) for manual testing. Download it from the Actions tab to test the changes locally.\n";
            } else {
              summary += "No code changes detected. This PR primarily contains documentation or workflow updates and is ready for manual review.\n";
            }

            // Only comment on PR, don't create issues
            if (context.eventName === 'pull_request') {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            }
